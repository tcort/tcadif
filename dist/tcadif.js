(()=>{"use strict";var e={d:(t,s)=>{for(var a in s)e.o(s,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:s[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{default:()=>Xi});class s extends Error{constructor(e="something went wrong",t={}){super(),this.name="AdifError",this.message=e,Object.assign(this,t)}}const a=s,r=class{static get tagName(){return null}static toADI(e){return`<${e=`${e}`.toUpperCase()}>`}},n=class{#e={};#t;constructor(e=[],t=r,s={}){e.forEach(e=>{this.#e[e.fieldName]=new e,Object.defineProperty(this,e.fieldName,{configurable:!0,enumerable:!0,get:function(){return this.#e[e.fieldName].value},set:function(t){return this.#e[e.fieldName].value=t}})}),this.#t=t,s="object"==typeof s&&null!==s?s:{},e.map(e=>e.fieldName).forEach(e=>{s.hasOwnProperty(e)&&(this[e]=s[e])})}static fromADI(e,t){const s=new RegExp("<(?<fieldName>[^ ]?[^,:<>{}]+[^ ]?)(:(?<dataLength>[0-9]+))?(:(?<dataTypeIndicator>[A-Za-z]))?>"),r=e=>{const t=s.exec(e);if(!t)return{};const[a]=t,r=t.groups.fieldName.toUpperCase(),n=void 0===t.groups.dataLength?null:parseInt(t.groups.dataLength);return{fieldName:r,dataLength:n,dataTypeIndicator:t.groups.dataTypeIndicator?.toUpperCase()??null,data:null===n?null:e.substring(t.index+a.length,t.index+a.length+n),charactersConsumed:t.index+a.length+(n??0)}};let n;for(n=0;;n++){const{fieldName:s,dataLength:i,dataTypeIndicator:c,data:l,charactersConsumed:o}=r(e.slice(n));if(void 0===s){if("{}"!==JSON.stringify(t.toObj()))throw new a("Premature end of input. Expected end tag",{expectedTag:t.#t.toADI(),segment:t.toObj()});return{segment:null,charactersConsumed:e.length}}if(s===t.#t.tagName)return{segment:t,charactersConsumed:n+o};const u=Object.keys(t.#e).find(e=>t.#e[e].fieldName===s);if(void 0!==u){if("string"==typeof c&&c.length>0&&t.#e[u].dataTypeIndicator!==c)throw new a("Data type indicator in ADI does not match data type indicator in field definition",{expectedDataTypeIndicator:field.dataTypeIndicator,actualDataTypeIndicator:c});t[u]=l,n+=o-1}else n+=o-1}}toADI(){return Object.keys(this.#e).map(e=>this.#e[e].toADI()).filter(e=>e.length>0).concat([this.#t.toADI()]).join("\r\n")}toObj(){const e={};return Object.keys(this.#e).map(e=>this.#e[e].toObj()).forEach(t=>Object.assign(e,t)),e}},i=class{static get dataTypeIndicator(){return null}static normalize(e){return e}static validate(){return!0}},c=class extends i{static get dataTypeIndicator(){return"E"}static normalize(e){return"string"==typeof e?e.toUpperCase():e}static isImportOnly(e,t){return t.isImportOnly(e)}static validate(e,t){if(!t.includes(e))throw new a("value not in enumeration",{value:e,enumerationValues:t.values});return!0}},l=class{#s;#a;#r;constructor(e,t,s=null){this.#s=e,this.#a=t,this.value=s??null}get defaultValue(){return null}get fieldName(){return this.#s}set value(e){if(null!==e){e=this.normalize(e);try{this.validate(e)}catch(t){throw new a("Field validation failed",{fieldName:this.#s,value:e,cause:t})}}this.#r=e}get value(){return this.#r}get dataTypeIndicator(){return this.#a.dataTypeIndicator}get importOnly(){return"function"==typeof this.#a?.isImportOnly&&this.#a.isImportOnly(this.value)}toADI(){return null===this.#r||this.importOnly?"":`<${this.#s}:${this.#r.length}${null===this.dataTypeIndicator?"":":"+this.dataTypeIndicator}>${this.value}`}toObj(){return null===this.#r||this.importOnly?{}:{[this.#s]:this.#r}}normalize(e){return this.#a.normalize(e)}validate(e){return this.#a.validate(e)}},o=class extends i{static validate(e){if("string"!=typeof e)throw new a("type of value not valid for CharacterDataType",{value:e,type:typeof e});const t=e.length;if(1!==t)throw new a("length of value not valid for CharacterDataType",{value:e,length:t,expectedLength:1});const s=e.charCodeAt(0);if(!(32<=s&&s<=126))throw new a("value not valid for CharacterDataType",{value:e,minCharCode:32,maxCharCode:126,charCode:s});return!0}},u=class extends i{static get dataTypeIndicator(){return"S"}static validate(e){if("string"!=typeof e)throw new a("value not valid for StringDataType",{value:e});return e.split("").forEach(e=>o.validate(e)),!0}};class d extends l{constructor(e){super(d.fieldName,u,e)}static get fieldName(){return"ADIF_VER"}validate(e){super.validate(e);const t=/^3\.[0-9]\.[0-9]$/;if(!t.test(e))throw new a("version does not match pattern",{value:e,re:t});return!0}}const f=d,m=class extends i{static normalize(e){return"number"==typeof e?`${e}`:e}static validate(e){if("string"!=typeof e)throw new a("type of value not valid for DigitDataType",{value:e,type:typeof e});const t=e.length;if(1!==t)throw new a("length of value not valid for DigitDataType",{value:e,length:t,expectedLength:1});const s=e.charCodeAt(0);if(!(48<=s&&s<=57))throw new a("value not valid for DigitDataType",{value:e,minCharCode:48,maxCharCode:57,charCode:s});return!0}};class p extends i{static get dataTypeIndicator(){return"D"}static isLeapYear(e){return e%4==0&&e%100!=0||e%400==0}static daysInMonth(e,t){switch(t){case 1:case 3:case 5:case 7:case 8:case 10:case 12:return 31;case 2:return p.isLeapYear(e)?29:28;case 4:case 6:case 9:case 11:return 30;default:return 0}}static validate(e){if("string"!=typeof e)throw new a("value not valid for DateDataType",{value:e});const t=e.length;if(8!==t)throw new a("length not valid for DateDataType",{value:e,length:t,expectedLength:8});e.split("").forEach(e=>m.validate(e));const s=parseInt(e.slice(0,4));if(!(1930<=s))throw new a("year outside of range for DateDataType",{value:e,year:s,minYear:1930,maxYear:9999});const r=parseInt(e.slice(4,6));if(!(1<=r&&r<=12))throw new a("month outside of range for DateDataType",{value:e,month:r,minMonth:1,maxMonth:12});const n=parseInt(e.slice(6,8)),i=p.daysInMonth(s,r);if(!(1<=n&&n<=i))throw new a("day outside of range for DateDataType",{value:e,day:n,minDay:1,maxDay:i});return!0}}const N=p,A=class extends i{static get dataTypeIndicator(){return"T"}static validate(e){const t=[4,6];if("string"!=typeof e)throw new a("value not valid for TimeDataType",{value:e});const s=e.length;if(!t.includes(s))throw new a("length not valid for TimeDataType",{value:e,length:s,expectedLengths:t});e.split("").forEach(e=>m.validate(e));const r=parseInt(e.slice(0,2));if(!(0<=r&&r<=59))throw new a("hour outside of range for TimeDataType",{value:e,hour:r,minHour:0,maxHour:59});const n=parseInt(e.slice(2,4));if(!(0<=r&&r<=59))throw new a("minute outside of range for TimeDataType",{value:e,minute:n,minMinute:0,maxMinute:59});if(6==s){const t=parseInt(e.slice(4,6)),s=0,r=59;if(!(s<=t&&t<=r))throw new a("second outside of range for TimeDataType",{value:e,second:t,minSecond:s,maxSecond:r})}return!0}};class T extends l{constructor(e){super(T.fieldName,u,e)}static get fieldName(){return"CREATED_TIMESTAMP"}validate(e){super.validate(e);const t=e.length;if(15!==t)throw new a("length is invalid for field",{value:e,length:t,expectedLength:15});const[s,r]=e.split(" ");return N.validate(s),A.validate(r),!0}}const S=T;class g extends l{constructor(e){super(g.fieldName,u,e)}static get fieldName(){return"PROGRAMID"}}const O=g;class v extends l{constructor(e){super(v.fieldName,u,e)}static get fieldName(){return"PROGRAMVERSION"}}const E=v;class I extends r{static get tagName(){return"EOH"}static toADI(){return r.toADI(I.tagName)}}const D=I;class x extends n{constructor(e={}){super([f,S,O,E],D,e)}static timestamp(e=new Date){const t=e.getUTCFullYear(),s=1+e.getUTCMonth(),a=e.getUTCDate(),r=e.getUTCHours(),n=e.getUTCMinutes(),i=e.getUTCSeconds();return[`${t}`.padStart(4,"0"),`${s}`.padStart(2,"0"),`${a}`.padStart(2,"0")," ",`${r}`.padStart(2,"0"),`${n}`.padStart(2,"0"),`${i}`.padStart(2,"0")].join("")}static fromADI(e){const t=new x;return n.fromADI(e,t)}toADI(){const e=super.toADI().trim();return e===D.toADI()?x.factory().toADI():e}static factory(){return new x({ADIF_VER:"3.1.6",PROGRAMID:"tcadif",PROGRAMVERSION:"3.0.0",CREATED_TIMESTAMP:x.timestamp()})}}const C=x;class _ extends r{static get tagName(){return"EOR"}static toADI(){return r.toADI(_.tagName)}}const R=_,h=class extends i{static get dataTypeIndicator(){return"M"}static validate(e){if("string"!=typeof e)throw new a("value not valid for MultilineStringDataType",{value:e});return(e=e.replace(/\r\n/g,"")).split("").forEach(e=>o.validate(e)),!0}};class y extends l{constructor(e){super(y.fieldName,h,e)}static get fieldName(){return"ADDRESS"}}const L=y,M=class extends i{static get dataTypeIndicator(){return"N"}static normalize(e){return/^00+/.test(e="number"==typeof e?`${e}`:e)?e=e.replace(/^0+/,"0"):/^-00+/.test(e)&&(e=e.replace(/^-0+/,"-0")),e}static validate(e){if("string"!=typeof e)throw new a("value not valid for NumberDataType",{value:e});return 45===e.charCodeAt(0)&&(e=e.slice(1)),(e=e.replace(".","")).split("").forEach(e=>m.validate(e)),!0}};class w extends l{constructor(e){super(w.fieldName,M,e)}static get fieldName(){return"AGE"}validate(e){super.validate(e);const t=parseFloat(e);if(!(0<=t&&t<=120))throw new AdifError("AGE field value out of range",{value:e,floatValue:t,minValue:0,maxValue:120});return!0}}const P=w;class F extends l{constructor(e){super(F.fieldName,M,e)}static get fieldName(){return"ALTITUDE"}}const V=F;class Q extends l{constructor(e){super(Q.fieldName,M,e)}static get fieldName(){return"ANT_AZ"}normalize(e){return!isNaN(parseFloat(e))&&parseFloat(e)>360&&(e=parseFloat(e)%360),super.normalize(e)}validate(e){super.validate(e);const t=parseFloat(e);if(!(0<=t&&t<=360))throw new AdifError("ANT_AZ field value out of range",{value:e,floatValue:t,minValue:0,maxValue:360});return!0}}const K=Q;class W extends l{constructor(e){super(W.fieldName,M,e)}static get fieldName(){return"ANT_EL"}normalize(e){return!isNaN(parseFloat(e))&&parseFloat(e)>90&&(e=parseFloat(e)%90),!isNaN(parseFloat(e))&&parseFloat(e)<-90&&(e=-1*parseFloat(e)%90*-1),super.normalize(e)}validate(e){super.validate(e);const t=parseFloat(e);if(!(-90<=t&&t<=90))throw new AdifError("ANT_EL field value out of range",{value:e,floatValue:t,minValue:-90,maxValue:90});return!0}}const U=W,X=class{#n;#i;constructor(e=[],t=[]){this.#n=e.map(e=>e.toUpperCase()),this.#i=t.map(e=>e.toUpperCase())}includes(e){return"string"==typeof e&&(this.#n.includes(e.toUpperCase())||this.#i.includes(e.toUpperCase()))}isImportOnly(e){return this.#i.includes(e.toUpperCase())}get values(){return this.#n}},H=new class extends X{constructor(){super(["G","O","S","L"])}},Y=class extends c{static isImportOnly(e){return c.isImportOnly(e,H)}static validate(e){return c.validate(e,H)}};class B extends l{constructor(e){super(B.fieldName,Y,e)}static get fieldName(){return"ANT_PATH"}}const G=B,J=new class extends X{constructor(){super(["Abbreviation","AL","AK","AB","AR","AZ","BC","CO","CT","DE","EB","EMA","ENY","EPA","EWA","GA","GH","GTA","ID","IL","IN","IA","KS","KY","LAX","LA","ME","MB","MAR","MDC","MI","MN","MS","MO","MT","NE","NV","NB","NH","NM","NLI","NL","NC","ND","NTX","NFL","NNJ","NNY","NT","NWT","NS","OH","OK","ON","ONE","ONN","ONS","ORG","OR","PAC","PE","PR","QC","RI","SV","SDG","SF","SJV","SB","SCV","SK","SC","SD","STX","SFL","SNJ","TN","TER","VI","UT","VT","VA","WCF","WTX","WV","WMA","WNY","WPA","WWA","WI","WY"])}},Z=class extends c{static isImportOnly(e){return c.isImportOnly(e,J)}static validate(e){return c.validate(e,J)}};class b extends l{constructor(e){super(b.fieldName,Z,e)}static get fieldName(){return"ARRL_SECT"}}const j=b,z=new class extends X{constructor(){super(["ADIF_","ARI_","ARRL_","CQ_","DARC_","EQSL_","IARU_","JARL_","RSGB_","TAG_","WABAG_"])}},$=class extends c{static validate(e){if(!z.values.some(t=>e.startsWith(t)))throw new a("invalid sponsor prefix",{value:e,validPrefixes:z.values});return!0}},q=class extends i{static normalize(e){return Array.isArray(e)&&(e=e.join(",")),e}static validate(e){if("string"!=typeof e)throw new a("value not valid for SponsoredAwardListDataType",{value:e});return e.split(",").forEach(e=>$.validate(e)),!0}};class k extends l{constructor(e){super(k.fieldName,q,e)}static get fieldName(){return"AWARD_SUBMITTED"}}const ee=k;class te extends l{constructor(e){super(te.fieldName,q,e)}static get fieldName(){return"AWARD_GRANTED"}}const se=te;class ae extends l{constructor(e){super(ae.fieldName,M,e)}static get fieldName(){return"A_INDEX"}validate(e){super.validate(e);const t=parseFloat(e);if(!(0<=t&&t<=400))throw new a("A_INDEX field value out of range",{value:e,floatValue:t,minValue:0,maxValue:400});return!0}}const re=ae,ne=new class extends X{constructor(){super(["2190m","630m","560m","160m","80m","60m","40m","30m","20m","17m","15m","12m","10m","8m","6m","5m","4m","2m","1.25m","70cm","33cm","23cm","13cm","9cm","6cm","3cm","1.25cm","6mm","4mm","2.5mm","2mm","1mm","submm"])}},ie=class extends c{static isImportOnly(e){return c.isImportOnly(e,ne)}static validate(e){return c.validate(e,ne)}};class ce extends l{constructor(e){super(ce.fieldName,ie,e)}static get fieldName(){return"BAND"}}const le=ce;class oe extends l{constructor(e){super(oe.fieldName,ie,e)}static get fieldName(){return"BAND_RX"}}const ue=oe;class de extends l{constructor(e){super(de.fieldName,u,e)}static get fieldName(){return"CALL"}}const fe=de;class me extends l{constructor(e){super(me.fieldName,u,e)}static get fieldName(){return"CHECK"}}const pe=me;class Ne extends l{constructor(e){super(Ne.fieldName,u,e)}static get fieldName(){return"CLASS"}}const Ae=Ne;class Te extends l{constructor(e){super(Te.fieldName,N,e)}static get fieldName(){return"CLUBLOG_QSO_UPLOAD_DATE"}}const Se=Te,ge=new class extends X{constructor(){super(["Y","N","M"])}},Oe=class extends c{static isImportOnly(e){return c.isImportOnly(e,ge)}static validate(e){return c.validate(e,ge)}};class ve extends l{constructor(e){super(ve.fieldName,Oe,e)}static get fieldName(){return"CLUBLOG_QSO_UPLOAD_STATUS"}}const Ee=ve;class Ie extends l{constructor(e){super(Ie.fieldName,u,e)}static get fieldName(){return"CNTY"}}const De=Ie;class xe extends l{constructor(e){super(xe.fieldName,u,e)}static get fieldName(){return"CNTY_ALT"}}const Ce=xe;class _e extends l{constructor(e){super(_e.fieldName,u,e)}static get fieldName(){return"COMMENT"}}const Re=_e,he=new class extends X{constructor(){super(["NA","SA","EU","AF","OC","AS","AN"])}},ye=class extends c{static isImportOnly(e){return c.isImportOnly(e,he)}static validate(e){return c.validate(e,he)}};class Le extends l{constructor(e){super(Le.fieldName,ye,e)}static get fieldName(){return"CONT"}}const Me=Le;class we extends l{constructor(e){super(we.fieldName,u,e)}static get fieldName(){return"CONTACTED_OP"}}const Pe=we;class Fe extends l{constructor(e){super(Fe.fieldName,u,e)}static get fieldName(){return"CONTEST_ID"}}const Ve=Fe;class Qe extends l{constructor(e){super(Qe.fieldName,u,e)}static get fieldName(){return"COUNTRY"}}const Ke=Qe,We=new class extends X{constructor(){super([],["AJA","CQDX","CQDXFIELD","CQWAZ_MIXED","CQWAZ_CW","CQWAZ_PHONE","CQWAZ_RTTY","CQWAZ_160m","CQWPX","DARC_DOK","DXCC","DXCC_MIXED","DXCC_CW","DXCC_PHONE","DXCC_RTTY","IOTA","JCC","JCG","MARATHON","RDA","WAB","WAC","WAE","WAIP","WAJA","WAS","WAZ","USACA","VUCC"])}},Ue=class extends c{static isImportOnly(e){return c.isImportOnly(e,We)}static validate(e){return c.validate(e,We)}},Xe=class extends i{static normalize(e){return Array.isArray(e)&&(e=e.join(",")),e}static validate(e){if("string"!=typeof e)throw new a("value not valid for AwardListDataType",{value:e});return e.split(",").forEach(e=>Ue.validate(e)),!0}},He=new class extends X{constructor(){super(["CQDX","CQDX_BAND","CQDX_MODE","CQDX_MOBILE","CQDX_QRP","CQDX_SATELLITE","CQDXFIELD","CQDXFIELD_BAND","CQDXFIELD_MODE","CQDXFIELD_MOBILE","CQDXFIELD_QRP","CQDXFIELD_SATELLITE","CQWAZ_MIXED","CQWAZ_BAND","CQWAZ_MODE","CQWAZ_SATELLITE","CQWAZ_EME","CQWAZ_MOBILE","CQWAZ_QRP","CQWPX","CQWPX_BAND","CQWPX_MODE","DXCC","DXCC_BAND","DXCC_MODE","DXCC_SATELLITE","EAUSTRALIA","ECANADA","ECOUNTY_STATE","EDX","EDX100","EDX100_BAND","EDX100_MODE","EECHOLINK50","EGRID_BAND","EGRID_SATELLITE","EPFX300","EPFX300_MODE","EWAS","EWAS_BAND","EWAS_MODE","EWAS_SATELLITE","EZ40","EZ40_MODE","FFMA","IOTA","IOTA_BASIC","IOTA_CONT","IOTA_GROUP","RDA","USACA","VUCC_BAND","VUCC_SATELLITE","WAB","WAC","WAC_BAND","WAE","WAE_BAND","WAE_MODE","WAIP","WAIP_BAND","WAIP_MODE","WAS","WAS_BAND","WAS_EME","WAS_MODE","WAS_NOVICE","WAS_QRP","WAS_SATELLITE","WITUZ","WITUZ_BAND"])}},Ye=class extends c{static isImportOnly(e){return c.isImportOnly(e,He)}static validate(e){return c.validate(e,He)}},Be=new class extends X{constructor(){super(["CARD","EQSL","LOTW"])}},Ge=class extends c{static isImportOnly(e){return c.isImportOnly(e,Be)}static validate(e){return c.validate(e,Be)}},Je=class extends i{static normalize(e){return Array.isArray(e)&&(e=e.join(",")),e}static validate(e){if("string"!=typeof e)throw new a("value not valid for CreditListDataType",{value:e});return e.split(",").forEach(e=>{const[t,s]=e.split(":");Ye.validate(t),"string"==typeof s&&s.length>0&&s.split("&").forEach(e=>{Ge.validate(e)})}),!0}};class Ze extends i{static normalize(e){return Array.isArray(e)&&(e=e.join(",")),e}static getDataType(e){try{return Je.validate(e),Je}catch(e){return Xe}}static isImportOnly(e){return Ze.getDataType(e)===Xe}static validate(e){return Ze.getDataType(e).validate(e),!0}}const be=Ze;class je extends l{constructor(e){super(je.fieldName,be,e)}static get fieldName(){return"CREDIT_SUBMITTED"}}const ze=je;class $e extends l{constructor(e){super($e.fieldName,be,e)}static get fieldName(){return"CREDIT_GRANTED"}}const qe=$e,ke=class extends i{static normalize(e){return/^0+/.test(e="number"==typeof e?`${e}`:e)&&(e=0===(e=e.replace(/^0+/,"")).length?"0":e),e}static validate(e){if("string"!=typeof e)throw new a("value not valid for PositiveIntegerDataType",{value:e});if(e.split("").forEach(e=>m.validate(e)),!(1<=parseInt(e)))throw new a("value not valid for PositiveIntegerDataType",{value:e,minValue:1});return!0}};class et extends l{constructor(e){super(et.fieldName,ke,e)}static get fieldName(){return"CQZ"}validate(e){super.validate(e);const t=parseInt(e);if(!(1<=t&&t<=40))throw new a("CQZ field value out of range",{value:e,intValue:t,minValue:1,maxValue:40});return!0}}const tt=et;class st extends l{constructor(e){super(st.fieldName,u,e)}static get fieldName(){return"DARC_DOK"}}const at=st;class rt extends l{constructor(e){super(rt.fieldName,N,e)}static get fieldName(){return"DCL_QSLRDATE"}}const nt=rt;class it extends l{constructor(e){super(it.fieldName,N,e)}static get fieldName(){return"DCL_QSLSDATE"}}const ct=it,lt=new class extends X{constructor(){super(["Y","N","R","I"],["V"])}},ot=class extends c{static isImportOnly(e){return c.isImportOnly(e,lt)}static validate(e){return c.validate(e,lt)}};class ut extends l{constructor(e){super(ut.fieldName,ot,e)}static get fieldName(){return"DCL_QSL_RCVD"}get defaultValue(){return"N"}}const dt=ut,ft=new class extends X{constructor(){super(["Y","N","R","Q","I"])}},mt=class extends c{static isImportOnly(e){return c.isImportOnly(e,ft)}static validate(e){return c.validate(e,ft)}};class pt extends l{constructor(e){super(pt.fieldName,mt,e)}static get fieldName(){return"DCL_QSL_SENT"}get defaultValue(){return"N"}}const Nt=pt;class At extends l{constructor(e){super(At.fieldName,M,e)}static get fieldName(){return"DISTANCE"}validate(e){super.validate(e);const t=parseFloat(e),s=1/0;if(!(0<=t&&t<=s))throw new a("DISTANCE field value out of range",{value:e,floatValue:t,minValue:0,maxValue:s});return!0}}const Tt=At,St=new class extends X{constructor(){super(["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","74","75","76","77","78","79","80","81","82","84","85","86","88","89","90","91","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","291","292","293","294","295","296","297","298","299","301","302","303","304","305","306","307","308","309","312","315","318","321","324","327","330","333","336","339","342","344","345","348","354","363","369","370","372","375","376","378","379","381","382","384","386","387","390","391","400","401","402","404","406","408","409","410","411","412","414","416","420","422","424","428","430","432","434","436","438","440","442","444","446","450","452","453","454","456","458","460","462","464","466","468","470","474","478","480","482","483","488","489","490","492","493","497","499","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522"])}},gt=class extends c{static normalize(e){return"number"==typeof e&&(e=`${e}`),e}static isImportOnly(e){return c.isImportOnly(e,St)}static validate(e){return c.validate(e,St)}};class Ot extends l{constructor(e){super(Ot.fieldName,gt,e)}static get fieldName(){return"DXCC"}}const vt=Ot;class Et extends l{constructor(e){super(Et.fieldName,u,e)}static get fieldName(){return"EMAIL"}}const It=Et;class Dt extends l{constructor(e){super(Dt.fieldName,u,e)}static get fieldName(){return"EQ_CALL"}}const xt=Dt,Ct=new class extends X{constructor(){super(["Y","N","U"])}},_t=class extends c{static isImportOnly(e){return c.isImportOnly(e,Ct)}static validate(e){return c.validate(e,Ct)}};class Rt extends l{constructor(e){super(Rt.fieldName,_t,e)}static get fieldName(){return"EQSL_AG"}}const ht=Rt;class yt extends l{constructor(e){super(yt.fieldName,N,e)}static get fieldName(){return"EQSL_QSLRDATE"}}const Lt=yt;class Mt extends l{constructor(e){super(Mt.fieldName,N,e)}static get fieldName(){return"EQSL_QSLSDATE"}}const wt=Mt;class Pt extends l{constructor(e){super(Pt.fieldName,ot,e)}static get fieldName(){return"EQSL_QSL_RCVD"}get defaultValue(){return"N"}}const Ft=Pt;class Vt extends l{constructor(e){super(Vt.fieldName,mt,e)}static get fieldName(){return"EQSL_QSL_SENT"}get defaultValue(){return"N"}}const Qt=Vt;class Kt extends l{constructor(e){super(Kt.fieldName,ke,e)}static get fieldName(){return"FISTS"}}const Wt=Kt;class Ut extends l{constructor(e){super(Ut.fieldName,ke,e)}static get fieldName(){return"FISTS_CC"}}const Xt=Ut;class Ht extends l{constructor(e){super(Ht.fieldName,M,e)}static get fieldName(){return"FREQ"}}const Yt=Ht;class Bt extends l{constructor(e){super(Bt.fieldName,M,e)}static get fieldName(){return"FREQ_RX"}}const Gt=Bt,Jt=class extends i{static get dataTypeIndicator(){return"B"}static normalize(e){return"boolean"==typeof e&&(e=e?"Y":"N"),"string"==typeof e?e.toUpperCase():e}static validate(e){if(!/^(Y|N)$/.test(e))throw new a("value not valid for BooleanDataType",{value:e});return!0}};class Zt extends l{constructor(e){super(Zt.fieldName,Jt,e)}static get fieldName(){return"FORCE_INIT"}}const bt=Zt,jt=class extends i{static normalize(e){return"string"==typeof e?e.toUpperCase():e}static validate(e){if("string"!=typeof e)throw new a("value not valid for GridSquareDataType",{value:e});const t=/^[A-R]{2}([0-9]{2}([A-X]{2}([0-9]{2})?)?)?$/i;if(!t.test(e))throw new a("Grid square does not match pattern",{value:e,re:t});return!0}};class zt extends l{constructor(e){super(zt.fieldName,jt,e)}static get fieldName(){return"GRIDSQUARE"}}const $t=zt,qt=class extends i{static normalize(e){return"string"==typeof e?e.toUpperCase():e}static validate(e){if("string"!=typeof e)throw new a("value not valid for GridSquareExtDataType",{value:e});const t=/^[A-X]{2}([0-9]{2})?$/i;if(!t.test(e))throw new a("Grid square extension does not match pattern",{value:e,re:t});return!0}};class kt extends l{constructor(e){super(kt.fieldName,qt,e)}static get fieldName(){return"GRIDSQUARE_EXT"}}const es=kt;class ts extends l{constructor(e){super(ts.fieldName,u,e)}get importOnly(){return!0}static get fieldName(){return"GUEST_OP"}}const ss=ts;class as extends l{constructor(e){super(as.fieldName,N,e)}static get fieldName(){return"HAMLOGEU_QSO_UPLOAD_DATE"}}const rs=as;class ns extends l{constructor(e){super(ns.fieldName,Oe,e)}static get fieldName(){return"HAMLOGEU_QSO_UPLOAD_STATUS"}}const is=ns;class cs extends l{constructor(e){super(cs.fieldName,N,e)}static get fieldName(){return"HAMQTH_QSO_UPLOAD_DATE"}}const ls=cs;class os extends l{constructor(e){super(os.fieldName,Oe,e)}static get fieldName(){return"HAMQTH_QSO_UPLOAD_STATUS"}}const us=os;class ds extends l{constructor(e){super(ds.fieldName,N,e)}static get fieldName(){return"HRDLOG_QSO_UPLOAD_DATE"}}const fs=ds;class ms extends l{constructor(e){super(ms.fieldName,Oe,e)}static get fieldName(){return"HRDLOG_QSO_UPLOAD_STATUS"}}const ps=ms,Ns=class extends i{static validate(e){if("string"!=typeof e)throw new a("value not valid for IotaRefNoDataType",{value:e});const[t,s]=e.split("-");try{ye.validate(t)}catch(s){throw new a("IOTA Ref No continent part is invalid",{value:e,continent:t,cause:s})}const r=parseInt(s);if(3!==s.length||isNaN(r)||!(1<=r&&r<=999))throw new a("Island group designator part of IOTA Ref No is outside the range",{value:e,islandGroupDesignator:s,intIslandGroupDesignator:r,minIslandGroupDesignator:1,maxIslangGroupDesignator:999});return!0}};class As extends l{constructor(e){super(As.fieldName,Ns,e)}static get fieldName(){return"IOTA"}}const Ts=As;class Ss extends l{constructor(e){super(Ss.fieldName,ke,e)}static get fieldName(){return"IOTA_ISLAND_ID"}validate(e){super.validate(e);const t=parseInt(e),s=99999999;if(!(1<=t&&t<=s))throw new a("IOTA Island ID field value out of range",{value:e,intValue:t,minValue:1,maxValue:s});return!0}}const gs=Ss;class Os extends l{constructor(e){super(Os.fieldName,ke,e)}static get fieldName(){return"ITUZ"}validate(e){super.validate(e);const t=parseInt(e);if(!(1<=t&&t<=90))throw new a("ITUZ field value out of range",{value:e,intValue:t,minValue:1,maxValue:90});return!0}}const vs=Os,Es=class extends i{static normalize(e){return/^0+/.test(e="number"==typeof e?`${e}`:e)&&(e=0===(e=e.replace(/^0+/,"")).length?"0":e),/^-0+/.test(e)&&(e="-"===(e=e.replace(/^-0+/,"-"))?"0":e),e}static validate(e){if("string"!=typeof e)throw new a("value not valid for IntegerDataType",{value:e});return 45===e.charCodeAt(0)&&(e=e.slice(1)),e.split("").forEach(e=>m.validate(e)),!0}};class Is extends l{constructor(e){super(Is.fieldName,Es,e)}static get fieldName(){return"K_INDEX"}validate(e){super.validate(e);const t=e.length;if(1!=t)throw new a("K_INDEX is not of the expected length",{value:e,length:t,expectedLength:1});return!0}}const Ds=Is,xs=class extends i{static get dataTypeIndicator(){return"L"}static validate(e){if("string"!=typeof e)throw new a("value not valid for LocationDataType",{value:e});const t=/^[NSEW][0-9]{3} [0-9]{2}\.[0-9]{3}$/;if(!t.test(e))throw new a("value does not match pattern for LocationDataType",{value:e,re:t});const s=parseInt(e.slice(1,4));if(!(0<=s&&s<=180))throw new a("location degress out of range",{value:e,degrees:s,minDegrees:0,maxDegrees:180});const r=parseInt(e.slice(5,7));if(!(0<=r&&r<=59))throw new a("location minutes out of range",{value:e,minutes:r,minMinutes:0,maxMinutes:59});return!0}};class Cs extends l{constructor(e){super(Cs.fieldName,xs,e)}static get fieldName(){return"LAT"}}const _s=Cs;class Rs extends l{constructor(e){super(Rs.fieldName,xs,e)}static get fieldName(){return"LON"}}const hs=Rs;class ys extends l{constructor(e){super(ys.fieldName,N,e)}static get fieldName(){return"LOTW_QSLRDATE"}}const Ls=ys;class Ms extends l{constructor(e){super(Ms.fieldName,N,e)}static get fieldName(){return"LOTW_QSLSDATE"}}const ws=Ms;class Ps extends l{constructor(e){super(Ps.fieldName,ot,e)}static get fieldName(){return"LOTW_QSL_RCVD"}get defaultValue(){return"N"}}const Fs=Ps;class Vs extends l{constructor(e){super(Vs.fieldName,mt,e)}static get fieldName(){return"LOTW_QSL_SENT"}get defaultValue(){return"N"}}const Qs=Vs;class Ks extends l{constructor(e){super(Ks.fieldName,M,e)}static get fieldName(){return"MAX_BURSTS"}validate(e){super.validate(e);const t=parseFloat(e),s=1/0;if(!(0<=t&&t<=s))throw new a("MAX_BURSTS field value out of range",{value:e,floatValue:t,minValue:0,maxValue:s});return!0}}const Ws=Ks,Us=new class extends X{constructor(){super(["AM","ARDOP","ATV","CHIP","CLO","CONTESTI","CW","DIGITALVOICE","DOMINO","DYNAMIC","FAX","FM","FSK441","FSK","FT8","HELL","ISCAT","JT4","JT6M","JT9","JT44","JT65","MFSK","MSK144","MTONE","MT63","OLIVIA","OPERA","PAC","PAX","PKT","PSK","PSK2K","Q15","QRA64","ROS","RTTY","RTTYM","SSB","SSTV","T10","THOR","THRB","TOR","V4","VOI","WINMOR","WSPR"],["AMTORFEC","ASCI","C4FM","CHIP64","CHIP128","DOMINOF","DSTAR","FMHELL","FSK31","GTOR","HELL80","HFSK","JT4A","JT4B","JT4C","JT4D","JT4E","JT4F","JT4G","JT65A","JT65B","JT65C","MFSK8","MFSK16","PAC2","PAC3","PAX2","PCW","PSK10","PSK31","PSK63","PSK63F","PSK125","PSKAM10","PSKAM31","PSKAM50","PSKFEC31","PSKHELL","QPSK31","QPSK63","QPSK125","THRBX"])}},Xs=class extends c{static isImportOnly(e){return c.isImportOnly(e,Us)}static validate(e){return c.validate(e,Us)}};class Hs extends l{constructor(e){super(Hs.fieldName,Xs,e)}static get fieldName(){return"MODE"}}const Ys=Hs;class Bs extends l{constructor(e){super(Bs.fieldName,u,e)}static get fieldName(){return"MORSE_KEY_INFO"}}const Gs=Bs,Js=new class extends X{constructor(){super(["SK","SS","BUG","FAB","SP","DP","CPU"])}},Zs=class extends c{static isImportOnly(e){return c.isImportOnly(e,Js)}static validate(e){return c.validate(e,Js)}};class bs extends l{constructor(e){super(bs.fieldName,Zs,e)}static get fieldName(){return"MORSE_KEY_TYPE"}}const js=bs;class zs extends l{constructor(e){super(zs.fieldName,u,e)}static get fieldName(){return"MS_SHOWER"}}const $s=zs;class qs extends l{constructor(e){super(qs.fieldName,M,e)}static get fieldName(){return"MY_ALTITUDE"}}const ks=qs;class ea extends l{constructor(e){super(ea.fieldName,u,e)}static get fieldName(){return"MY_ANTENNA"}}const ta=ea;class sa extends l{constructor(e){super(sa.fieldName,Z,e)}static get fieldName(){return"MY_ARRL_SECT"}}const aa=sa;class ra extends l{constructor(e){super(ra.fieldName,u,e)}static get fieldName(){return"MY_CITY"}}const na=ra;class ia extends l{constructor(e){super(ia.fieldName,u,e)}static get fieldName(){return"MY_CNTY"}}const ca=ia;class la extends l{constructor(e){super(la.fieldName,u,e)}static get fieldName(){return"MY_CNTY_ALT"}}const oa=la;class ua extends l{constructor(e){super(ua.fieldName,u,e)}static get fieldName(){return"MY_COUNTRY"}}const da=ua;class fa extends l{constructor(e){super(fa.fieldName,ke,e)}static get fieldName(){return"MY_CQ_ZONE"}validate(e){super.validate(e);const t=parseInt(e);if(!(1<=t&&t<=40))throw new a("MY_CQ_ZONE field value out of range",{value:e,intValue:t,minValue:1,maxValue:40});return!0}}const ma=fa;class pa extends l{constructor(e){super(pa.fieldName,u,e)}static get fieldName(){return"MY_DARC_DOK"}}const Na=pa;class Aa extends l{constructor(e){super(Aa.fieldName,gt,e)}static get fieldName(){return"MY_DXCC"}}const Ta=Aa;class Sa extends l{constructor(e){super(Sa.fieldName,ke,e)}static get fieldName(){return"MY_FISTS"}}const ga=Sa;class Oa extends l{constructor(e){super(Oa.fieldName,jt,e)}static get fieldName(){return"MY_GRIDSQUARE"}}const va=Oa;class Ea extends l{constructor(e){super(Ea.fieldName,qt,e)}static get fieldName(){return"MY_GRIDSQUARE_EXT"}}const Ia=Ea;class Da extends l{constructor(e){super(Da.fieldName,Ns,e)}static get fieldName(){return"MY_IOTA"}}const xa=Da;class Ca extends l{constructor(e){super(Ca.fieldName,ke,e)}static get fieldName(){return"MY_IOTA_ISLAND_ID"}validate(e){super.validate(e);const t=parseInt(e),s=99999999;if(!(1<=t&&t<=s))throw new a("IOTA Island ID field value out of range",{value:e,intValue:t,minValue:1,maxValue:s});return!0}}const _a=Ca;class Ra extends l{constructor(e){super(Ra.fieldName,ke,e)}static get fieldName(){return"MY_ITU_ZONE"}validate(e){super.validate(e);const t=parseInt(e);if(!(1<=t&&t<=90))throw new a("MY_ITU_ZONE field value out of range",{value:e,intValue:t,minValue:1,maxValue:90});return!0}}const ha=Ra;class ya extends l{constructor(e){super(ya.fieldName,xs,e)}static get fieldName(){return"MY_LAT"}}const La=ya;class Ma extends l{constructor(e){super(Ma.fieldName,xs,e)}static get fieldName(){return"MY_LON"}}const wa=Ma;class Pa extends l{constructor(e){super(Pa.fieldName,u,e)}static get fieldName(){return"MY_MORSE_KEY_INFO"}}const Fa=Pa;class Va extends l{constructor(e){super(Va.fieldName,Zs,e)}static get fieldName(){return"MY_MORSE_KEY_TYPE"}}const Qa=Va;class Ka extends l{constructor(e){super(Ka.fieldMyName,u,e)}static get fieldMyName(){return"MY_NAME"}}const Wa=Ka;class Ua extends l{constructor(e){super(Ua.fieldName,u,e)}static get fieldName(){return"MY_POSTAL_CODE"}}const Xa=Ua,Ha=class extends i{static normalize(e){return"string"==typeof e?e.toUpperCase():e}static validate(e){if("string"!=typeof e)throw new a("value not valid for PotaRefDataType",{value:e});const t=/^[0-9A-Z]{1,4}-[0-9A-Z]{4,5}(@[0-9A-Z-]{4,6})?$/i;if(!t.test(e))throw new a("POTARef does not match pattern",{value:e,re:t});return!0}},Ya=class extends i{static normalize(e){return Array.isArray(e)&&(e=e.join(",")),e}static validate(e){if("string"!=typeof e)throw new a("value not valid for PotaRefListDataType",{value:e});return e.split(",").forEach(e=>Ha.validate(e)),!0}};class Ba extends l{constructor(e){super(Ba.fieldName,Ya,e)}static get fieldName(){return"MY_POTA_REF"}}const Ga=Ba;class Ja extends l{constructor(e){super(Ja.fieldName,u,e)}static get fieldName(){return"MY_RIG"}}const Za=Ja;class ba extends l{constructor(e){super(ba.fieldName,u,e)}static get fieldName(){return"MY_SIG"}}const ja=ba;class za extends l{constructor(e){super(za.fieldName,u,e)}static get fieldName(){return"MY_SIG_INFO"}}const $a=za,qa=class extends i{static normalize(e){return"string"==typeof e?e.toUpperCase():e}static validate(e){if("string"!=typeof e)throw new a("value not valid for SotaRefDataType",{value:e});const t=/^[0-9A-Z\/-]+$/i;if(!t.test(e))throw new a("SOTARef does not match pattern",{value:e,re:t});return!0}};class ka extends l{constructor(e){super(ka.fieldName,qa,e)}static get fieldName(){return"MY_SOTA_REF"}}const er=ka;class tr extends l{constructor(e){super(tr.fieldName,u,e)}static get fieldName(){return"MY_STATE"}}const sr=tr;class ar extends l{constructor(e){super(ar.fieldName,u,e)}static get fieldName(){return"MY_STREET"}}const rr=ar;class nr extends l{constructor(e){super(nr.fieldName,u,e)}static get fieldName(){return"MY_USACA_COUNTIES"}}const ir=nr,cr=class extends i{static normalize(e){return Array.isArray(e)&&(e=e.join(",")),e}static validate(e){if("string"!=typeof e)throw new a("value not valid for GridSquareListDataType",{value:e});return e.split(",").forEach(e=>jt.validate(e)),!0}};class lr extends l{constructor(e){super(lr.fieldName,cr,e)}static get fieldName(){return"MY_VUCC_GRIDS"}}const or=lr,ur=class extends i{static normalize(e){return"string"==typeof e?e.toUpperCase():e}static validate(e){if("string"!=typeof e)throw new a("value not valid for WwffRefDataType",{value:e});const t=/^[0-9A-Z]{1,4}[0-9A-Z]{2}\-[0-9]{4}$/i;if(!t.test(e))throw new a("WWFFRef does not match pattern",{value:e,re:t});return!0}};class dr extends l{constructor(e){super(dr.fieldName,ur,e)}static get fieldName(){return"MY_WWFF_REF"}}const fr=dr;class mr extends l{constructor(e){super(mr.fieldName,u,e)}static get fieldName(){return"NAME"}}const pr=mr;class Nr extends l{constructor(e){super(Nr.fieldName,h,e)}static get fieldName(){return"NOTES"}}const Ar=Nr;class Tr extends l{constructor(e){super(Tr.fieldName,Es,e)}static get fieldName(){return"NR_BURSTS"}validate(e){super.validate(e);const t=parseInt(e),s=1/0;if(!(1<=t&&t<=s))throw new a("NR_BURSTS field value out of range",{value:e,intValue:t,minValue:1,maxValue:s});return!0}}const Sr=Tr;class gr extends l{constructor(e){super(gr.fieldName,Es,e)}static get fieldName(){return"NR_BURSTS"}validate(e){super.validate(e);const t=parseInt(e),s=1/0;if(!(1<=t&&t<=s))throw new a("NR_BURSTS field value out of range",{value:e,intValue:t,minValue:1,maxValue:s});return!0}}const Or=gr;class vr extends l{constructor(e){super(vr.fieldName,u,e)}static get fieldName(){return"OPERATOR"}}const Er=vr;class Ir extends l{constructor(e){super(Ir.fieldName,u,e)}static get fieldName(){return"OWNER_CALLSIGN"}}const Dr=Ir;class xr extends l{constructor(e){super(xr.fieldName,u,e)}static get fieldName(){return"PFX"}}const Cr=xr;class _r extends l{constructor(e){super(_r.fieldName,Ya,e)}static get fieldName(){return"POTA_REF"}}const Rr=_r;class hr extends l{constructor(e){super(hr.fieldName,u,e)}static get fieldName(){return"PRECEDENCE"}}const yr=hr,Lr=new class extends X{constructor(){super(["AS","AUE","AUR","BS","ECH","EME","ES","F2","FAI","GWAVE","INTERNET","ION","IRL","LOS","MS","RPT","RS","SAT","TEP","TR"])}},Mr=class extends c{static isImportOnly(e){return c.isImportOnly(e,Lr)}static validate(e){return c.validate(e,Lr)}};class wr extends l{constructor(e){super(wr.fieldName,Mr,e)}static get fieldName(){return"PROP_MODE"}}const Pr=wr;class Fr extends l{constructor(e){super(Fr.fieldName,u,e)}static get fieldName(){return"PUBLIC_KEY"}}const Vr=Fr;class Qr extends l{constructor(e){super(Qr.fieldName,N,e)}static get fieldName(){return"QRZCOM_QSO_DOWNLOAD_DATE"}}const Kr=Qr,Wr=new class extends X{constructor(){super(["Y","N","I"])}},Ur=class extends c{static isImportOnly(e){return c.isImportOnly(e,Wr)}static validate(e){return c.validate(e,Wr)}};class Xr extends l{constructor(e){super(Xr.fieldName,Ur,e)}static get fieldName(){return"QRZCOM_QSO_DOWNLOAD_STATUS"}}const Hr=Xr;class Yr extends l{constructor(e){super(Yr.fieldName,N,e)}static get fieldName(){return"QRZCOM_QSO_UPLOAD_DATE"}}const Br=Yr;class Gr extends l{constructor(e){super(Gr.fieldName,Oe,e)}static get fieldName(){return"QRZCOM_QSO_UPLOAD_STATUS"}}const Jr=Gr;class Zr extends l{constructor(e){super(Zr.fieldName,h,e)}static get fieldName(){return"QSLMSG"}}const br=Zr;class jr extends l{constructor(e){super(jr.fieldName,h,e)}static get fieldName(){return"QSLMSG_RCVD"}}const zr=jr;class $r extends l{constructor(e){super($r.fieldName,N,e)}static get fieldName(){return"QSLRDATE"}}const qr=$r;class kr extends l{constructor(e){super(kr.fieldName,N,e)}static get fieldName(){return"QSLSDATE"}}const en=kr;class tn extends l{constructor(e){super(tn.fieldName,ot,e)}static get fieldName(){return"QSL_RCVD"}get defaultValue(){return"N"}}const sn=tn,an=new class extends X{constructor(){super(["B","D","E"],["M"])}},rn=class extends c{static isImportOnly(e){return c.isImportOnly(e,an)}static validate(e){return c.validate(e,an)}};class nn extends l{constructor(e){super(nn.fieldName,rn,e)}static get fieldName(){return"QSL_RCVD_VIA"}}const cn=nn;class ln extends l{constructor(e){super(ln.fieldName,mt,e)}static get fieldName(){return"QSL_SENT"}get defaultValue(){return"N"}}const on=ln;class un extends l{constructor(e){super(un.fieldName,rn,e)}static get fieldName(){return"QSL_SENT_VIA"}}const dn=un;class fn extends l{constructor(e){super(fn.fieldName,u,e)}static get fieldName(){return"QSL_VIA"}}const mn=fn,pn=new class extends X{constructor(){super(["Y","N","NIL","?"])}},Nn=class extends c{static isImportOnly(e){return c.isImportOnly(e,pn)}static validate(e){return c.validate(e,pn)}};class An extends l{constructor(e){super(An.fieldName,Nn,e)}static get fieldName(){return"QSO_COMPLETE"}}const Tn=An;class Sn extends l{constructor(e){super(Sn.fieldName,N,e)}static get fieldName(){return"QSO_DATE"}}const gn=Sn;class On extends l{constructor(e){super(On.fieldName,N,e)}static get fieldName(){return"QSO_DATE_OFF"}}const vn=On;class En extends l{constructor(e){super(En.fieldName,Jt,e)}static get fieldName(){return"QSO_RANDOM"}}const In=En;class Dn extends l{constructor(e){super(Dn.fieldName,u,e)}static get fieldName(){return"QTH"}}const xn=Dn,Cn=new class extends X{constructor(){super(["NONE","IV","AI","SY","BI","SI","KO","KO","KO","ET"])}},_n=class extends c{static isImportOnly(e){return c.isImportOnly(e,Cn)}static validate(e){return c.validate(e,Cn)}};class Rn extends l{constructor(e){super(Rn.fieldName,_n,e)}static get fieldName(){return"REGION"}}const hn=Rn;class yn extends l{constructor(e){super(yn.fieldName,h,e)}static get fieldName(){return"RIG"}}const Ln=yn;class Mn extends l{constructor(e){super(Mn.fieldName,u,e)}static get fieldName(){return"RST_RCVD"}}const wn=Mn;class Pn extends l{constructor(e){super(Pn.fieldName,u,e)}static get fieldName(){return"RST_SENT"}}const Fn=Pn;class Vn extends l{constructor(e){super(Vn.fieldName,M,e)}static get fieldName(){return"RX_PWR"}validate(e){super.validate(e);const t=parseFloat(e),s=1/0;if(!(0<=t&&t<=s))throw new a("RX_PWR field value out of range",{value:e,floatValue:t,minValue:0,maxValue:s});return!0}}const Qn=Vn;class Kn extends l{constructor(e){super(Kn.fieldName,u,e)}static get fieldName(){return"SAT_MODE"}}const Wn=Kn;class Un extends l{constructor(e){super(Un.fieldName,u,e)}static get fieldName(){return"SAT_NAME"}}const Xn=Un;class Hn extends l{constructor(e){super(Hn.fieldName,M,e)}static get fieldName(){return"SFI"}validate(e){super.validate(e);const t=parseFloat(e);if(!(0<=t&&t<=300))throw new a("SFI field value out of range",{value:e,floatValue:t,minValue:0,maxValue:300});return!0}}const Yn=Hn;class Bn extends l{constructor(e){super(Bn.fieldName,u,e)}static get fieldName(){return"SIG"}}const Gn=Bn;class Jn extends l{constructor(e){super(Jn.fieldName,u,e)}static get fieldName(){return"SIG_INFO"}}const Zn=Jn;class bn extends l{constructor(e){super(bn.fieldName,Jt,e)}static get fieldName(){return"SILENT_KEY"}}const jn=bn;class zn extends l{constructor(e){super(zn.fieldName,u,e)}static get fieldName(){return"SKCC"}}const $n=zn;class qn extends l{constructor(e){super(qn.fieldName,qa,e)}static get fieldName(){return"SOTA_REF"}}const kn=qn;class ei extends l{constructor(e){super(ei.fieldName,M,e)}static get fieldName(){return"SRX"}validate(e){super.validate(e);const t=parseFloat(e),s=1/0;if(!(0<=t&&t<=s))throw new a("SRX field value out of range",{value:e,floatValue:t,minValue:0,maxValue:s});return!0}}const ti=ei;class si extends l{constructor(e){super(si.fieldName,u,e)}static get fieldName(){return"SRX_STRING"}}const ai=si;class ri extends l{constructor(e){super(ri.fieldName,u,e)}static get fieldName(){return"STATE"}}const ni=ri;class ii extends l{constructor(e){super(ii.fieldName,u,e)}static get fieldName(){return"STATION_CALLSIGN"}}const ci=ii;class li extends l{constructor(e){super(li.fieldName,M,e)}static get fieldName(){return"STX"}validate(e){super.validate(e);const t=parseFloat(e),s=1/0;if(!(0<=t&&t<=s))throw new a("STX field value out of range",{value:e,floatValue:t,minValue:0,maxValue:s});return!0}}const oi=li;class ui extends l{constructor(e){super(ui.fieldName,u,e)}static get fieldName(){return"STX_STRING"}}const di=ui,fi=new class extends X{constructor(){super(["8PSK125","8PSK125F","8PSK125FL","8PSK250","8PSK250F","8PSK250FL","8PSK500","8PSK500F","8PSK1000","8PSK1000F","8PSK1200F","AMTORFEC","ASCI","C4FM","CHIP64","CHIP128","DMR","DOM-M","DOM4","DOM5","DOM8","DOM11","DOM16","DOM22","DOM44","DOM88","DOMINOEX","DOMINOF","DSTAR","FMHELL","FREEDV","FSK31","FSKH105","FSKH245","FSKHELL","FSQCALL","FST4","FST4W","FT4","GTOR","HELL80","HELLX5","HELLX9","HFSK","ISCAT-A","ISCAT-B","JS8","JT4A","JT4B","JT4C","JT4D","JT4E","JT4F","JT4G","JT9-1","JT9-2","JT9-5","JT9-10","JT9-30","JT9A","JT9B","JT9C","JT9D","JT9E","JT9E FAST","JT9F","JT9F FAST","JT9G","JT9G FAST","JT9H","JT9H FAST","JT65A","JT65B","JT65B2","JT65C","JT65C2","JTMS","LSB","M17","MFSK4","MFSK8","MFSK11","MFSK16","MFSK22","MFSK31","MFSK32","MFSK64","MFSK64L","MFSK128","MFSK128L","NAVTEX","OLIVIA 4/125","OLIVIA 4/250","OLIVIA 8/250","OLIVIA 8/500","OLIVIA 16/500","OLIVIA 16/1000","OLIVIA 32/1000","OPERA-BEACON","OPERA-QSO","PAC2","PAC3","PAC4","PAX2","PCW","PSK10","PSK31","PSK63","PSK63F","PSK63RC10","PSK63RC20","PSK63RC32","PSK63RC4","PSK63RC5","PSK125","PSK125RC10","PSK125RC12","PSK125RC16","PSK125RC4","PSK125RC5","PSK250","PSK250RC2","PSK250RC3","PSK250RC5","PSK250RC6","PSK250RC7","PSK500","PSK500RC2","PSK500RC3","PSK500RC4","PSK800RC2","PSK1000","PSK1000RC2","PSKAM10","PSKAM31","PSKAM50","PSKFEC31","PSKHELL","QPSK31","Q65","QPSK63","QPSK125","QPSK250","QPSK500","QRA64A","QRA64B","QRA64C","QRA64D","QRA64E","ROS-EME","ROS-HF","ROS-MF","SCAMP_FAST","SCAMP_OO","SCAMP_OO_SLW","SCAMP_SLOW","SCAMP_VSLOW","SIM31","SITORB","SLOWHELL","THOR-M","THOR4","THOR5","THOR8","THOR11","THOR16","THOR22","THOR25X4","THOR50X1","THOR50X2","THOR100","THRBX","THRBX1","THRBX2","THRBX4","THROB1","THROB2","THROB4","USB","VARA HF","VARA SATELLITE","VARA FM 1200","VARA FM 9600"])}},mi=class extends c{static isImportOnly(e){return c.isImportOnly(e,fi)}static validate(e){return c.validate(e,fi)}};class pi extends l{constructor(e){super(pi.fieldName,mi,e)}static get fieldName(){return"SUBMODE"}}const Ni=pi;class Ai extends l{constructor(e){super(Ai.fieldName,Jt,e)}static get fieldName(){return"SWL"}}const Ti=Ai;class Si extends l{constructor(e){super(Si.fieldName,ke,e)}static get fieldName(){return"TEN_TEN"}}const gi=Si;class Oi extends l{constructor(e){super(Oi.fieldName,A,e)}static get fieldName(){return"TIME_OFF"}}const vi=Oi;class Ei extends l{constructor(e){super(Ei.fieldName,A,e)}static get fieldName(){return"TIME_ON"}}const Ii=Ei;class Di extends l{constructor(e){super(Di.fieldName,M,e)}static get fieldName(){return"TX_PWR"}validate(e){super.validate(e);const t=parseFloat(e),s=1/0;if(!(0<=t&&t<=s))throw new a("TX_PWR field value out of range",{value:e,floatValue:t,minValue:0,maxValue:s});return!0}}const xi=Di;class Ci extends l{constructor(e){super(Ci.fieldName,ke,e)}static get fieldName(){return"UKSMG"}}const _i=Ci;class Ri extends l{constructor(e){super(Ri.fieldName,u,e)}static get fieldName(){return"USACA_COUNTIES"}}const hi=Ri;class yi extends l{constructor(e){super(yi.fieldName,u,e)}get importOnly(){return!0}static get fieldName(){return"VE_PROV"}}const Li=yi;class Mi extends l{constructor(e){super(Mi.fieldName,cr,e)}static get fieldName(){return"VUCC_GRIDS"}}const wi=Mi;class Pi extends l{constructor(e){super(Pi.fieldName,u,e)}static get fieldName(){return"WEB"}}const Fi=Pi;class Vi extends l{constructor(e){super(Vi.fieldName,ur,e)}static get fieldName(){return"WWFF_REF"}}const Qi=Vi;class Ki extends n{constructor(e={}){super([L,P,V,K,U,G,j,ee,se,re,le,ue,fe,pe,Ae,Se,Ee,De,Ce,Re,Me,Pe,Ve,Ke,tt,ze,qe,at,nt,ct,dt,Nt,Tt,vt,It,xt,ht,Lt,wt,Ft,Qt,Wt,Xt,bt,Yt,Gt,$t,es,ss,rs,is,ls,us,fs,ps,Ts,gs,vs,Ds,_s,hs,Ls,ws,Fs,Qs,Ws,Ys,Gs,js,$s,ks,ta,aa,na,ca,oa,da,ma,Na,Ta,ga,va,Ia,xa,_a,ha,La,wa,Fa,Qa,Wa,Xa,Ga,Za,ja,$a,er,sr,rr,ir,or,fr,pr,Ar,Sr,Or,Er,Dr,Cr,Rr,yr,Pr,Vr,Kr,Hr,Br,Jr,br,zr,qr,en,sn,cn,on,dn,mn,Tn,gn,vn,In,xn,hn,Ln,wn,Fn,Qn,Wn,Xn,Yn,Gn,Zn,jn,$n,kn,ti,ai,ni,ci,oi,di,Ni,Ti,gi,vi,Ii,xi,_i,hi,Li,wi,Fi,Qi],R,e)}static fromADI(e){const t=new Ki;return n.fromADI(e,t)}}const Wi=Ki;class Ui{#c;#l;constructor(e={},t=[]){1===arguments.length&&(e?.hasOwnProperty("HEADER")||e?.hasOwnProperty("RECORDS"))&&(t=e.RECORDS,e=e.HEADER),this.#c=new C(e),this.#l=t.map(e=>new Wi(e))}static fromADI(e){let t=0;const s={HEADER:{},RECORDS:[]};if("<"!==e[t]){const{segment:a,charactersConsumed:r}=C.fromADI(e.slice(t));s.HEADER=a,t+=r}for(;t<e.length;){const{segment:a,charactersConsumed:r}=Wi.fromADI(e.slice(t));null!==a&&s.RECORDS.push(a),t+=r}return Ui.fromObj(s)}static fromObj(e){return new Ui(e)}static fromJSON(e){return Ui.fromObj(JSON.parse(e))}toADI(){return["// This is an ADIF File",this.#c.toADI(),...this.#l.map(e=>e.toADI())].join("\r\n\r\n")}toObj(){return{HEADER:this.#c.toObj(),RECORDS:this.#l.map(e=>e.toObj())}}toJSON(){return JSON.stringify(this.toObj(),null,4)}}const Xi={File:Ui,Version:class{static get name(){return"tcadif"}static get version(){return"3.0.0"}static get homepage(){return"https://github.com/tcort/tcadif"}}};self.tcadif=t.default})();